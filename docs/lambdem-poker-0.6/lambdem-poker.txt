-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Poker client
--   
--   Poker client
@package lambdem-poker
@version 0.6


-- | All poker card related types are declared here.
module Poker.Logic.Types.Cards

-- | Card deck.
data Deck
Deck :: Int -> [Card] -> Deck
[size] :: Deck -> Int
[body] :: Deck -> [Card]

-- | Derive <a>Show</a> class for <a>Deck</a>.

-- | Poker combination.
data Combination
Combination :: HandRank -> [CardRank] -> [CardRank] -> Combination
[handRank] :: Combination -> HandRank

-- | card ranks that indicate combination strength
[structure] :: Combination -> [CardRank]

-- | kicker card ranks
[kicker] :: Combination -> [CardRank]

-- | Hand ranks.
data HandRank
High_card :: HandRank
One_pair :: HandRank
Two_pair :: HandRank
Three_of_a_kind :: HandRank
Straight :: HandRank
Flush :: HandRank
Full_house :: HandRank
Four_of_a_kind :: HandRank
Straight_flush :: HandRank
Royal_flush :: HandRank

-- | Derive <a>Show</a> class for <a>HandRank</a>.

-- | Poker card.
data Card
Card :: CardRank -> Suit -> Card
[cardRank] :: Card -> CardRank
[suit] :: Card -> Suit

-- | Derive <a>Show</a> class for <a>Card</a>.

-- | Derive <a>Enum</a> class for <a>Card</a>.

-- | Card suites.
data Suit

-- | ♦
Diamonds :: Suit

-- | ♣
Clubs :: Suit

-- | ♥
Hearts :: Suit

-- | ♠
Spades :: Suit

-- | Card ranks.
data CardRank

-- | 2
Deuce :: CardRank

-- | 3
Three :: CardRank

-- | 4
Four :: CardRank

-- | 5
Five :: CardRank

-- | 6
Six :: CardRank

-- | 7
Seven :: CardRank

-- | 8
Eight :: CardRank

-- | 9
Nine :: CardRank

-- | T
Ten :: CardRank

-- | J
Jack :: CardRank

-- | Q
Queen :: CardRank

-- | K
King :: CardRank

-- | A
Ace :: CardRank

-- | Contain all 52 cards.
createDeck :: Deck

-- | List of all card short names.
allCardNames :: [String]

-- | Convert card to short name.
cardToShortName :: Card -> String

-- | List of all suites.
allSuites :: [Suit]

-- | List of all card ranks.
allCardRanks :: [CardRank]
instance GHC.Show.Show Poker.Logic.Types.Cards.Combination
instance GHC.Classes.Ord Poker.Logic.Types.Cards.Combination
instance GHC.Classes.Eq Poker.Logic.Types.Cards.Combination
instance GHC.Classes.Ord Poker.Logic.Types.Cards.Card
instance GHC.Classes.Eq Poker.Logic.Types.Cards.Card
instance GHC.Show.Show Poker.Logic.Types.Cards.CardRank
instance GHC.Enum.Enum Poker.Logic.Types.Cards.CardRank
instance GHC.Enum.Bounded Poker.Logic.Types.Cards.CardRank
instance GHC.Classes.Ord Poker.Logic.Types.Cards.CardRank
instance GHC.Classes.Eq Poker.Logic.Types.Cards.CardRank
instance GHC.Show.Show Poker.Logic.Types.Cards.Suit
instance GHC.Enum.Enum Poker.Logic.Types.Cards.Suit
instance GHC.Enum.Bounded Poker.Logic.Types.Cards.Suit
instance GHC.Classes.Ord Poker.Logic.Types.Cards.Suit
instance GHC.Classes.Eq Poker.Logic.Types.Cards.Suit
instance GHC.Classes.Ord Poker.Logic.Types.Cards.HandRank
instance GHC.Classes.Eq Poker.Logic.Types.Cards.HandRank
instance GHC.Show.Show Poker.Logic.Types.Cards.Deck
instance GHC.Show.Show Poker.Logic.Types.Cards.Card
instance GHC.Enum.Enum Poker.Logic.Types.Cards.Card
instance GHC.Show.Show Poker.Logic.Types.Cards.HandRank


-- | Module to deal with computation related to poker combinations.
module Poker.Logic.Calculations

-- | Return if card array is a straight and it's rank.
checkStraight :: [Card] -> (Bool, CardRank)

-- | Return if card array is a flush and 5-7 cards ranks.
checkFlush :: [Card] -> (Bool, [CardRank])

-- | Return hand rank and kicker cards depending on card array.
computeHandRank :: [Card] -> (HandRank, ([CardRank], [CardRank]))

-- | Compute combination from hand and board.
computeCombination :: Maybe (Card, Card) -> [Card] -> Combination

-- | Convert card list to sort int list with removed duplicates, Ace card
--   is counted twice for A2345 straights.
cardToStraightNumList :: [Card] -> [Int]

-- | Get length of sequence that starts from head element of list.
getSequenceLength :: [Int] -> Int

-- | Convert int list to list that contain max sequence starting from each
--   element.
getSequencesLength :: [Int] -> [Int]

-- | Count amount of each suit in card list.
countSuits :: [Card] -> [Int]

-- | Count amount of each rank in card list.
countRanks :: [Card] -> [Int]

-- | Return indexes of n last elements that are equal to given.
takeEqualBestN :: Int -> Int -> [Int] -> [Int]

-- | Convert combination list to bool list with marked top combinations.
--   Receive combination list zipped with bool list that indicates if the
--   combination require to participate in comparing.
markWinningCombinations :: [(Bool, Combination)] -> [Bool]


-- | All AI related types are declared here.
module Poker.AI.Types

-- | Additional player data for AI needs.
data AIPlayer
AIPlayer :: [Card] -> PlayStyle -> Bool -> Bool -> Bool -> StdGen -> AIPlayer

-- | dealt cards, including board
[cards] :: AIPlayer -> [Card]

-- | type of play style
[playStyle] :: AIPlayer -> PlayStyle

-- | made preflop raise
[madePFR] :: AIPlayer -> Bool

-- | made cbet on flop
[madeCbet] :: AIPlayer -> Bool

-- | made cbet on turn
[madeBarrel] :: AIPlayer -> Bool

-- | random number generator
[rng] :: AIPlayer -> StdGen

-- | Data about player game patterns.
data PlayStyle
PlayStyle :: PlayStyleType -> BetRange -> HandRangePF -> Int -> Int -> Int -> BetRange -> CombinationRange -> BetRange -> BetRange -> BetRange -> BetSizings -> PlayStyle

-- | name of play style
[playStyleType] :: PlayStyle -> PlayStyleType

-- | in big blinds
[betSizeRangePF] :: PlayStyle -> BetRange

-- | range of preflop hand
[pfHandPower] :: PlayStyle -> HandRangePF

-- | % to cbet flop
[cbet] :: PlayStyle -> Int

-- | % to cbet turn after flop cbet
[sndBarrel] :: PlayStyle -> Int

-- | % to cbet river after turn cbet
[trdBarrel] :: PlayStyle -> Int

-- | in % of pot
[betSizeRangePostF] :: PlayStyle -> BetRange

-- | range of hand power
[handPower] :: PlayStyle -> CombinationRange

-- | in % relative to hand power
[betRangePostF] :: PlayStyle -> BetRange

-- | in % relative to hand power
[callRangePostF] :: PlayStyle -> BetRange

-- | in % relative to hand power
[raiseRangePostF] :: PlayStyle -> BetRange

-- | sizings for bets in %
[betSizings] :: PlayStyle -> BetSizings

-- | Play style types.
data PlayStyleType

-- | opens very huge range, raises almost never
Telephone :: PlayStyleType

-- | opens huge range, raises occasionally
Passive :: PlayStyleType

-- | opens big range, raises periodically
Loose :: PlayStyleType

-- | opens small range, raises often
Tight :: PlayStyleType

-- | opens medium range, raises very often
Aggresive :: PlayStyleType

-- | choose one of previous five lines to act
Random :: PlayStyleType

-- | Container to hold range of hands.
data CardRange
CardRange :: [(CardRank, CardRank)] -> [CardRank] -> [(CardRank, CardRank)] -> CardRange
[suitedRange] :: CardRange -> [(CardRank, CardRank)]
[pairedRange] :: CardRange -> [CardRank]
[offsuitedRange] :: CardRange -> [(CardRank, CardRank)]

-- | Type of bets.
data BetType
Small_Bet :: BetType
Medium_Bet :: BetType
Big_Bet :: BetType
Huge_Bet :: BetType

-- | Container to hold range of bets.
data BetRange
BetRange :: Int -> Int -> Int -> Int -> BetRange
[smallBet] :: BetRange -> Int
[mediumBet] :: BetRange -> Int
[bigBet] :: BetRange -> Int
[hugeBet] :: BetRange -> Int

-- | Type of hand power.
data HandPower
Trash_Hand :: HandPower
Weak_Hand :: HandPower
Medium_Hand :: HandPower
Strong_Hand :: HandPower
Monster_Hand :: HandPower

-- | Container to hold ranges of hands.
data HandRangePF
HandRangePF :: CardRange -> CardRange -> CardRange -> CardRange -> HandRangePF
[vpipRange] :: HandRangePF -> CardRange
[pfrRange] :: HandRangePF -> CardRange
[raiseRange] :: HandRangePF -> CardRange
[pushRange] :: HandRangePF -> CardRange

-- | Container to hold range of combinations. Represents minimum
--   requirements for hand power.
data CombinationRange
CombinationRange :: Combination -> Combination -> Combination -> Combination -> CombinationRange
[weakHand] :: CombinationRange -> Combination
[mediumHand] :: CombinationRange -> Combination
[strongHand] :: CombinationRange -> Combination
[monsterHand] :: CombinationRange -> Combination

-- | Container to hold bet sizings.
data BetSizings
BetSizings :: Int -> Int -> Int -> Int -> Int -> BetSizings
[raisePF] :: BetSizings -> Int
[cbetFlop] :: BetSizings -> Int
[betPostF] :: BetSizings -> Int
[betDistribution] :: BetSizings -> Int
[raisePostF] :: BetSizings -> Int
instance GHC.Classes.Eq Poker.AI.Types.BetType
instance GHC.Enum.Enum Poker.AI.Types.PlayStyleType


-- | Contains ranges of poker hands.
module Poker.AI.Ranges

-- | Best 2.6% hands for all-in in any situations.
bestPremium :: CardRange

-- | Best 4.2% hands recommended for preflop all-in.
highPremium :: CardRange

-- | Premium 7.5% hands that dominates on preflop
mediumPremium :: CardRange

-- | <ol>
--   <li>9% range</li>
--   </ol>
lowPremium :: CardRange

-- | EP 6max PFR, 12.7%
epPFR :: CardRange

-- | MP 6 max PFR, 20.4%
mpPFR :: CardRange

-- | CO 6max PFR, 31.1%
coPFR :: CardRange

-- | BTN 6max PFR, 44.2%
btnPFR :: CardRange

-- | Half of all hands, 50.7%
halfOpen :: CardRange

-- | <ol>
--   <li>8%</li>
--   </ol>
sixtyOpen :: CardRange

-- | <ol>
--   <li>1%</li>
--   </ol>
seventyOpen :: CardRange

-- | <ol>
--   <li>5%</li>
--   </ol>
eightyFiveOpen :: CardRange

-- | <ol>
--   <li>6% range, all broadway, 55+</li>
--   </ol>
broadwayToFives :: CardRange


-- | Contains constructors for playstyles.
module Poker.AI.PlayStyles

-- | Return new AI player data with defined play style and random number
--   generator.
getAIPlayer :: PlayStyleType -> StdGen -> AIPlayer
randomPlaystyle :: StdGen -> PlayStyle

-- | Telephone player.
telephonePlaystyle :: PlayStyle

-- | Passive player.
passivePlaystyle :: PlayStyle

-- | Loose player.
loosePlaystyle :: PlayStyle

-- | Tight player.
tightPlaystyle :: PlayStyle

-- | Aggresive player.
aggresivePlaystyle :: PlayStyle


-- | All types related to game process are declared here.
module Poker.Logic.Types.Game

-- | Possible game states.
data GameState
Start_Hand :: GameState
Dealing_Hand :: GameState
Posting_Blinds :: GameState
Start_Round :: GameState
Bet_Round :: GameState
Show_Click :: GameState
Waiting_User_Input :: GameState
AI_Thinking :: GameState
Next_Move :: GameState
Finish_Hand :: GameState
Finish_Game :: GameState

-- | Contain all personal player data.
data Player
Player :: PlayerType -> String -> Int -> Position -> Seat -> Maybe (Card, Card) -> Bool -> Bool -> Int -> Move -> Int -> Maybe AIPlayer -> Player
[control] :: Player -> PlayerType
[name] :: Player -> String
[balance] :: Player -> Int
[position] :: Player -> Position
[seat] :: Player -> Seat
[hand] :: Player -> Maybe (Card, Card)
[hideHand] :: Player -> Bool
[active] :: Player -> Bool
[pressed] :: Player -> Int
[move] :: Player -> Move
[invested] :: Player -> Int
[aiData] :: Player -> Maybe AIPlayer

-- | Types of players.
data PlayerType
Human :: PlayerType
AI :: PlayerType

-- | Poker positions.
data Position

-- | Under The Gun
UTG :: Position

-- | Middle Position
MP :: Position

-- | Cut-Off
CO :: Position

-- | Button
BTN :: Position

-- | Small Blind
SB :: Position

-- | Big Blind
BB :: Position

-- | Describes all seating positions.
data Seat
Bottom :: Seat
Left_Down :: Seat
Left_Up :: Seat
Top :: Seat
Right_Up :: Seat
Right_Down :: Seat

-- | Contain information about player move.
data Move
Move :: MadeActionType -> Int -> Move
[action] :: Move -> MadeActionType
[betSize] :: Move -> Int

-- | Types of action that player made.
data MadeActionType
Bankrupted :: MadeActionType
Waiting :: MadeActionType
Checked :: MadeActionType
Called :: MadeActionType
Folded :: MadeActionType
Raised :: MadeActionType
All_In_ed :: MadeActionType

-- | Types of possible action that player can make.
data ActionType
Fold :: ActionType
Check :: ActionType
Call :: ActionType
Bet :: ActionType
Raise :: ActionType
All_In :: ActionType

-- | Current hand progress.
data Street
Preflop :: Street
Flop :: Street
Turn :: Street
River :: Street
Showdown :: Street

-- | Return list with all action names.
allActionNames :: [String]
instance GHC.Enum.Enum Poker.Logic.Types.Game.Street
instance GHC.Classes.Eq Poker.Logic.Types.Game.Street
instance GHC.Show.Show Poker.Logic.Types.Game.ActionType
instance GHC.Enum.Enum Poker.Logic.Types.Game.ActionType
instance GHC.Enum.Bounded Poker.Logic.Types.Game.ActionType
instance GHC.Classes.Eq Poker.Logic.Types.Game.ActionType
instance GHC.Classes.Eq Poker.Logic.Types.Game.MadeActionType
instance GHC.Classes.Eq Poker.Logic.Types.Game.Position
instance GHC.Classes.Eq Poker.Logic.Types.Game.GameState


-- | Contains stuff to process bet rounds.
module Poker.Logic.Trading

-- | Return first position depending on amount of players and street.
getFirstPosition :: Int -> Street -> Position

-- | Return next position depending on amount of players and street.
getNextPositon :: Int -> Street -> Position -> Position

-- | Return next position by clock arrow depending on player amount.
getNextPositionClockwise :: Position -> Int -> Position

-- | Return last position depending on amount of players and street.
getLastPosition :: Int -> Street -> Position

-- | Return seat of player on given position. Unsafe function for [] and
--   lists without player with given position.
getSeatOfPosition :: Position -> [Player] -> Seat

-- | Check if active player is skippable depending on max bet and amount of
--   players in hand that aren't all-in.
checkSkipForActivePlayer :: Player -> Int -> Int -> Bool

-- | Return amount of players left in hand.
countInHandPlayers :: [Player] -> Int

-- | Return amount of players in hand that can require move.
countCanMovePlayers :: [Player] -> Int

-- | Return maximal bet that occured.
countMaxBet :: [Player] -> Int

-- | Return if repeating of trade is needed.
checkReTrade :: [Player] -> Int -> Bool

-- | Return if game ended.
checkGameEnd :: [Player] -> Bool

-- | Return if player with given name won the game.
checkWin :: [Player] -> String -> Bool

-- | Return default move to proposed bet size when human didn't made any
--   input.
autoHumanMove :: Player -> Int -> Move

-- | Calculate pot.
calculatePot :: [Player] -> Int

-- | Return move depending on pressed button number, possible actions,
--   incoming bet, selected bet, made bet and player balance.
getMoveFromButtonPressed :: Int -> (ActionType, ActionType) -> Int -> Int -> Player -> Move

-- | Return active player. Isn't safe for [] case.
getActivePlayer :: [Player] -> Player

-- | Set active player depending to given position and unsets previous
--   active player.
toggleNewActivePlayer :: [Player] -> Position -> [Player]

-- | Write move to player on given position.
writeMove :: [Player] -> Position -> Move -> [Player]

-- | Decrease balance by bet, increase invested by bet, vanish move if can.
applyMoveResults :: [Player] -> [Player]

-- | Find out hand results and reward winner(-s) or split pot if draw. Also
--   open all cards that should be shown at showdown. Vanish AI data
--   relative to hand.
computeHandResults :: [Player] -> [Card] -> [Player]

-- | Give award to first active player.
giveLeftPart :: Int -> [Player] -> [Player]

-- | Return amount of winners among player that invested something and mark
--   them as active.
markWinnersActive :: [Player] -> [Card] -> (Int, [Player])

-- | Take from player part of invested sized in pot.
takePotFromPlayer :: Player -> Int -> (Player, Int)

-- | Take from each player part of invested sized in pot.
takePotFromPlayers :: [Player] -> Int -> ([Player], Int)

-- | Change player positions.
changePlayerPositions :: [Player] -> [Player]

-- | Get possible actions for player depending on incoming bet. Return only
--   second two actions. Fold action is calculated independently.
getPossibleActions :: Player -> Int -> (ActionType, ActionType)

-- | Write number of pressed button to active player.
writeButtonClick :: Int -> [Player] -> [Player]

-- | Time to get response from AI player.
aiThinkTime :: Float

-- | Time to get response from human player.
humanThinkTime :: Float

-- | Time to display showdown results.
showdownTime :: Float


-- | Module for operating with card dealing.
module Poker.Logic.Dealer

-- | Deal cards from deck to players.
dealPlayers :: [Player] -> StdGen -> Deck -> ([Player], (StdGen, Deck))

-- | Get one random card from a deck.
getCard :: StdGen -> Deck -> (Card, (StdGen, Deck))

-- | Get hand from a deck.
getHand :: StdGen -> Deck -> ((Card, Card), (StdGen, Deck))

-- | Get n entities from a deck.
performN :: (StdGen -> Deck -> (a, (StdGen, Deck))) -> Int -> (StdGen, Deck) -> ([a], (StdGen, Deck))

-- | Deal board cards depending on street.
dealBoard :: StdGen -> Deck -> [Card] -> Street -> ([Card], (StdGen, Deck))

-- | Take blind from player and mark bankrupted players.
takeBlind :: Player -> Int -> Player

-- | Take blinds from players and mark bankrupted players.
takeBlinds :: [Player] -> Int -> [Player]

-- | Hide hand depending on player type and settings.
hideHands :: [Player] -> [Player]

-- | Open all hands.
openHands :: [Player] -> [Player]

-- | Time consumed to deal cards.
dealTime :: Float

-- | Time consumed to post blinds.
postTime :: Float

-- | Hide AI hand during bet rounds.
hideAIhand :: Bool

-- | Hide human hand during bet rounds.
hideHumaHand :: Bool


-- | All interface related types are declared here.
module Poker.Interface.Types

-- | Contain all data relative to table game screen.
data TableScreen
TableScreen :: GameState -> Float -> [Player] -> String -> Street -> Int -> Seat -> Int -> Slider -> [Card] -> StdGen -> Deck -> TableImages -> TableScreen

-- | current game state
[state] :: TableScreen -> GameState

-- | for detecting time
[timer] :: TableScreen -> Float

-- | info about every player
[players] :: TableScreen -> [Player]

-- | name of hero
[hero] :: TableScreen -> String

-- | current street
[street] :: TableScreen -> Street

-- | current hand number
[handCount] :: TableScreen -> Int

-- | position of dealer
[dealer] :: TableScreen -> Seat

-- | size of big blind
[blindSize] :: TableScreen -> Int

-- | slider properties
[sliderData] :: TableScreen -> Slider

-- | cards on board
[board] :: TableScreen -> [Card]

-- | random number generator
[randomizer] :: TableScreen -> StdGen

-- | cards to deal
[deck] :: TableScreen -> Deck

-- | images relative to screen
[images] :: TableScreen -> TableImages

-- | Contain all images relative to table game screen.
data TableImages
TableImages :: Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> Picture -> [ButtonText] -> Picture -> [SmallButtonText] -> Picture -> DeckLayout -> ChipLayout -> TableImages
[background] :: TableImages -> Picture
[win] :: TableImages -> Picture
[loss] :: TableImages -> Picture
[table] :: TableImages -> Picture
[seatBold] :: TableImages -> Picture
[seatBoldActive] :: TableImages -> Picture
[slider] :: TableImages -> Picture
[sliderBall] :: TableImages -> Picture
[button] :: TableImages -> Picture
[buttonClicked] :: TableImages -> Picture
[buttonTexts] :: TableImages -> [ButtonText]
[smallButton] :: TableImages -> Picture
[smallButtonTexts] :: TableImages -> [SmallButtonText]
[betWindow] :: TableImages -> Picture
[deckLayout] :: TableImages -> DeckLayout
[chipLayout] :: TableImages -> ChipLayout

-- | Contains text to show on buttons.
data ButtonText
ButtonText :: ActionType -> Picture -> ButtonText
[actionType] :: ButtonText -> ActionType
[actionText] :: ButtonText -> Picture

-- | Contains text to show on small buttons.
data SmallButtonText
SmallButtonText :: Int -> Picture -> SmallButtonText

-- | size of pot in percentage
[betSizing] :: SmallButtonText -> Int
[betSizeText] :: SmallButtonText -> Picture

-- | Contain layout for card deck.
data DeckLayout
DeckLayout :: Picture -> [Picture] -> DeckLayout

-- | image for back side of card
[back] :: DeckLayout -> Picture

-- | images for front side of cards
[front] :: DeckLayout -> [Picture]

-- | Contain layout for chips.
data ChipLayout
ChipLayout :: Picture -> [Chip] -> ChipLayout
[dealerChip] :: ChipLayout -> Picture
[stack] :: ChipLayout -> [Chip]

-- | Contain chip size and image.
data Chip
Chip :: Int -> Picture -> Chip
[value] :: Chip -> Int
[sprite] :: Chip -> Picture

-- | Contain slider data.
data Slider
Slider :: Int -> Int -> Int -> Float -> Float -> Bool -> Slider
[minValue] :: Slider -> Int
[maxValue] :: Slider -> Int
[currentValue] :: Slider -> Int

-- | in pixels
[stepSize] :: Slider -> Float

-- | in pixels
[ballPosition] :: Slider -> Float
[isSelected] :: Slider -> Bool

-- | Value of all chips.
allChipValues :: [Int]

-- | Value of all small buttons.
allBetSizings :: [Int]

-- | Height of button.
buttonHeight :: Float


-- | Contain offsets for images.
module Poker.Interface.Offsets

-- | Return offset for cards depending on seat.
getHandOffset :: Seat -> (Float, Float)

-- | Return offset for seatbold depending on seat.
getSeatBoldOffset :: Seat -> (Float, Float)

-- | Return offset for dealer chip depending on seat.
getDealerChipOffset :: Seat -> (Float, Float)

-- | Return offset for player name depending on seat.
getTextNameOffset :: Seat -> (Float, Float)

-- | Return offset for player balance depending on seat.
getBalanceOffset :: Seat -> (Float, Float)

-- | Return chip offset for player bet depending on seat and amount of chip
--   columns.
getChipsOffset :: Seat -> Int -> (Float, Float)

-- | Return pot offset depending on amount of columns.
getPotOffset :: Int -> (Float, Float)

-- | Right card offset.
cardOffset :: Float

-- | Horizontal offset between chip columns.
chipColumnOffset :: Float

-- | Vertical offset between chips in one column.
chipTowerOffset :: Float

-- | Offset for cards that are displayed on table.
cardsOnTableOffset :: (Float, Float)

-- | Offset between cards that are displayed on table.
cardsOnTableRowOffset :: Float

-- | Offset for button.
buttonOffset :: Float

-- | Vertical offset for buttons.
buttonPositionOffset :: Float

-- | Offset for small button.
smallButtonOffset :: Float

-- | Offset for small buttons.
smallButtonPositionOffset :: (Float, Float)

-- | Offset for slider.
sliderOffset :: (Float, Float)

-- | Offset for bet window.
betWindowOffset :: (Float, Float)

-- | Offset for test in bet window.
betWindowTextOffset :: (Float, Float)

-- | Vertical offset for result message
resultMessageOffset :: Float


-- | Contain functions for texture and sprites loading.
module Poker.Interface.Loader

-- | Load all table images from files.
loadedTableImages :: IO TableImages

-- | Load small button texts.
loadSmallButtonTexts :: IO [SmallButtonText]

-- | Load button texts.
loadButtonTexts :: IO [ButtonText]

-- | Load deck layout.
loadDeckLayout :: IO [Picture]

-- | Load chip layout.
loadChipLayout :: IO [Chip]

-- | Return <a>Picture</a> or blank.
unwrapMaybePicture :: Maybe Picture -> Picture


-- | Module that operates with input events.
module Poker.Interface.Handlers

-- | Operate with user input.
handleInput :: Event -> TableScreen -> TableScreen

-- | Handle mouse click.
handleClick :: (Float, Float) -> TableScreen -> TableScreen

-- | Handle small button click depending on button number and pot size.
handleSmallButtonClick :: Int -> Int -> Slider -> Slider

-- | Handle slider click depending on click horizontal position.
handleSliderClick :: Float -> Int -> Slider -> Slider

-- | Moves slider ball if possible.
moveSliderBall :: Float -> Int -> Slider -> Slider

-- | Updates slider min and max values depending on player and incoming
--   bet.
updateSlideData :: Slider -> Player -> Int -> Int -> Slider

-- | Return clicked button number depending on first button bounding
--   rectangle.
checkButtonHit :: (Float, Float) -> ((Float, Float), (Float, Float)) -> Bool -> Int

-- | Return if clicked slider area.
checkSliderHit :: (Float, Float) -> Bool

-- | Bounding rectangle for first button.
buttonHitbox :: ((Float, Float), (Float, Float))

-- | Height of small button.
smallButtonHeight :: Float

-- | Bounding rectangle for first small button.
smallButtonHitbox :: ((Float, Float), (Float, Float))

-- | Slider inside padding to slider ball area.
sliderPadding :: (Float, Float)

-- | Slider dimensions.
sliderDimensions :: (Float, Float)

-- | Slider horizontal bounds.
sliderHitbox :: ((Float, Float), (Float, Float))

-- | Time to show click on button.
clickTime :: Float


-- | Responsible for drawing all content on the screen.
module Poker.Interface.Renderer

-- | Draw tablescreen.
drawTableScreen :: TableScreen -> Picture

-- | Draw player seatbold.
drawPlayerSeatBold :: Player -> Picture -> Picture

-- | Draw cards.
drawHand :: Bool -> Maybe (Card, Card) -> DeckLayout -> Picture

-- | Apply offset for player hand depending on seat.
drawPlayerHand :: Player -> DeckLayout -> Picture

-- | Draw player name.
drawPlayerName :: Player -> Picture

-- | Draw player balance.
drawPlayerBalance :: Player -> Picture

-- | Draw dealer chip.
drawDealerChip :: Seat -> ChipLayout -> Picture

-- | Draw player bet.
drawPlayerBet :: Player -> ChipLayout -> Picture

-- | Draw column of chips.
drawChipColumn :: Float -> Float -> Int -> Picture -> Picture

-- | Draw bet in chips by separation and horizontal offset.
drawBet :: Float -> [Int] -> [Chip] -> Picture

-- | Draw size of bet.
drawBetSize :: Int -> (Float, Float) -> Picture

-- | Draw pot by it'size.
drawPot :: Int -> ChipLayout -> Picture

-- | Draw small text. Size is unknown.
drawText :: Color -> String -> Picture

-- | Draw cards on table.
drawCardsOnTable :: [Card] -> [Picture] -> Picture

-- | Draw row of pictures.
drawRow :: Float -> [Picture] -> Picture

-- | Draw buttons with possible actions for player.
drawButtons :: (ActionType, ActionType) -> (Picture, Picture) -> [ButtonText] -> Int -> Picture

-- | Draw small buttons.
drawSmallButtons :: Picture -> [Picture] -> Picture

-- | Draw slider with possible raise values for player.
drawSlider :: Slider -> Picture -> Picture -> Picture

-- | Draw bet window with selected bet/raise size.
drawBetWindow :: Int -> Picture -> Picture

-- | Calculate margins for window depending on display resolutions.
getMarginsFrom :: (Int, Int) -> (Int, Int)

-- | Separate bet into chip count list.
separateBet :: Int -> [Int] -> [Int]

-- | Return button text for action. Unsafe function for [] and lists
--   without that action.
getActionText :: [ButtonText] -> ActionType -> Picture

-- | Resolution.
windowSize :: (Int, Int)


-- | Here is located all functions related to AI computations.
module Poker.AI.Engine

-- | Main function that return AI move and updated AI data depending on
--   it's play style, incoming bet, blind size, pot and street.
calculateAIMove :: Player -> Int -> Int -> Int -> Street -> (Move, AIPlayer)

-- | Calculate move on preflop depending on hand, play style, made bet,
--   incoming bet, max bet and blind size.
calculatePreFlopMove :: [Card] -> PlayStyle -> Int -> Int -> Int -> Int -> Move

-- | Calculate move on postflop depending on combination, play style, made
--   bet, incoming bet, max bet, pot size, street and last move.
calculatePostFlopMove :: Combination -> PlayStyle -> Int -> Int -> Int -> Int -> Street -> Bool -> StdGen -> (Move, StdGen)

-- | Update AIPlayer data for player.
updateAIData :: Player -> [Card] -> Player

-- | Write changes to AI data to player on given position.
writeAIDataChange :: [Player] -> Position -> AIPlayer -> [Player]

-- | Return if chance in range 0-100 succeed.
checkChance :: Int -> StdGen -> (Bool, StdGen)

-- | Return if hand is in range.
checkRange :: [Card] -> CardRange -> Bool

-- | Return type of bet.
evalBet :: Int -> BetRange -> BetType

-- | Return strength of combination.
evalHand :: Combination -> CombinationRange -> HandPower

-- | Return suggested move for hand on preflop.
suggestPFMove :: [Card] -> HandRangePF -> ActionType


-- | Core module that handles all major game processes.
module Client

-- | Launch game screen.
launchGame :: IO ()

-- | Parse command line arguments.
parsePlaystyle :: IO [String] -> IO PlayStyleType

-- | Initialization of table screen. All images are loaded and all player
--   data is set.
initTableScreen :: StdGen -> PlayStyleType -> IO TableScreen

-- | Create new table screen made of images and set default parameters.
createTableScreenWith :: StdGen -> PlayStyleType -> TableImages -> TableScreen

-- | Update game parameters depending on game state.
updateGame :: Float -> TableScreen -> TableScreen
